{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Vigiliant Crypto Snatch is a little program that observes the current market price for your choice of currency pairs, looks for drastic reductions (dips) and then places buy orders.</p> <p></p> <p>The basic idea is to use the Dollar Cost Average effect in a bit more clever way. By buying in fixed time intervals for a certain amount of fiat currency, one can profit from a sideways moving market with fluctuations. We can try to improve on this by also actively looking for reductions in the price to buy more cryptocurrency for the same fiat amount.</p> <p>This project recognizes two main user groups:</p> <ol> <li>Casual users who want to try this on their desktop computer running Windows, macOS or Linux. For these users we have a graphical user interface which is supposed to be easy to use.</li> <li>Advanced users who want to have the program running 24/7 on their own server, usually an ARM based miniature computer. For these users we have a command line service.</li> </ol> <p>Go through the subsequent pages to get it installed, configured and learn how to use it.</p> <p>In case you wonder about the name: Dips means that the price dives. Submarines dive. The HMS Vigilant is a submarine of the British Navy. But also vigilance means to observe.</p> <p></p>"},{"location":"deployment/","title":"Deployment","text":"<p>Using the other pages, you should have already configured the program and tried to use it. It should log into the marketplace, report your balance and load the triggers. Then you can start it and have it run, but you likely want a proper deployment.</p> <p>Most users seem to have a Raspberry Pi, which is an affordable miniature server. It is perfectly suited to run this little Python program. You can also run it on a larger server, if you want.</p> <p>We will introduce a couple ways that you can deploy this program.</p>"},{"location":"deployment/#screen-session","title":"Screen session","text":"<p>If you log into your Linux server via SSH and start a program, it will run on the server. But when you disconnect, the program will be shut shown. This is not what we want, we want to have the service running the whole time. Therefore a simple SSH connection is not appropriate.</p> <p>Fortunately there are terminal multiplexers, namely screen and tmux. For our purposes both are just perfectly fine. The idea is that you have a persistent terminal on the server, and you just attach to see it, and detach from viewing it. It is still there, even if you don't see it.</p> <p>For that start a new screen session, and perhaps already give it a name (we use <code>vigilant</code> here, but you are free to choose):</p> <pre><code>$ screen -S vigilant\n</code></pre> <p>Not much will change, you will get a fresh screen. Then start the program as documented in the usage page. It should start up.</p> <p>Then you can Ctrl+A, then D. This will detach the session. Use <code>screen -ls</code> to see a list of all sessions that are open. This can look like this:</p> <pre><code>$ screen -ls\nThere is a screen on:\n        445439.vigilant (Detached)\n1 Socket in /run/screen/S-mu.\n</code></pre> <p>Now you can logout via SSH, and the program will still run. Later you can log back in and use <code>screen -r vigilant</code> to reattach the session and control it or look at the log output.</p>"},{"location":"deployment/#team-viewer","title":"Team Viewer","text":"<p>You might have set up your Raspberry Pi with a graphical user interface and a running session. In that case you log into that session using Team Viewer or any other remote administration tool. Just open a terminal window and start the program. It will keep running when you disconnect from Team Viewer.</p>"},{"location":"deployment/#systemd-unit","title":"Systemd unit","text":"<p>A very modern approach for continuous running is to use systemd. That is the program which starts all the other programs on a modern Linux system. It needs to have a definition of the service. It is a text file which looks like this:</p> <pre><code>[Unit]\nDescription=Vigilant Crypto Snatch Service (watch)\nStartLimitIntervalSec=500\nStartLimitBurst=5\nAfter=network.target\n\n[Service]\nUser=USERNAME\nExecStart=/usr/local/bin/vigilant-crypto-snatch watch --marketplace kraken --keepalive\nRestart=on-failure\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Create a text file at <code>/etc/systemd/system/vigilant-crypto-snatch.service</code> and put that content into it, making these changes:</p> <ul> <li> <p>Be sure to replace the placeholder <code>USERNAME</code> with the one where you have put the config. On a Raspberry Pi that is usually just the username <code>pi</code>. You can find out like this:</p> <pre><code>$ echo $USER\nmu\n</code></pre> </li> <li> <p>You also need to change the path, which you can find out by executing <code>type vigilant-crypto-snatch</code> on the command line.</p> </li> <li> <p>The command line flags might not be the ones you want, perhaps you want a different market place.</p> </li> </ul> <p>Once you have that unit in place, you can query systemd to show you this unit:</p> <pre><code>$ sudo systemctl status vigilant-crypto-snatch\n\u25cb vigilant-crypto-snatch.service - Vigilant Crypto Snatch Service (watch)\n     Loaded: loaded (/etc/systemd/system/vigilant-crypto-snatch.service; disabled; vendor preset: disabled)\n     Active: inactive (dead)\n</code></pre> <p>If you want to have this unit started on system startup, you need to enable it with <code>sudo systemctl enable vigilant-crypto-snatch</code>. To start the unit, you use <code>sudo systemctl start vigilant-crypto-snatch</code>. Using the above <code>status</code> command you can check whether it has started or crashed and also get the latest error messages.</p>"},{"location":"developing/","title":"Developing","text":"<p>If you want to contribute, that's awesome! It is best if you get in touch first, then we can discuss the best way to add your idea.</p> <p>We try to develop this in a Clean Code way, with the least amount of coupling. We also follow the Hypermodern Python series for project layout and choice of tooling.</p>"},{"location":"developing/#development-setup","title":"Development setup","text":"<p>This project is written in Python. It uses Poetry to manage the project and its dependencies.</p> <p>Once you have obtained the source code via <code>git clone</code>, you can install the project into a virtual environment using <code>poetry install</code>. This will install all the dependencies and the package.</p> <p>You can of course use any Python development environment that you want. Martin can recommend PyCharm Community Edition. Make sure to install the \u201cPoetry\u201d plugin to easily set up the virtual environment.</p> <p>In order to run in development mode, use Poetry:</p> <pre><code>poetry run vigilant-crypto-snatch [more command line arguments]\n</code></pre> <p>You can run the tests with <code>pytest</code>:</p> <pre><code>poetry run pytest\n</code></pre> <p>In order to determine test coverage, use this:</p> <pre><code>poetry run coverage run --source=src -m pytest\npoetry run coverage html\n</code></pre> <p>We use the pre-commit tool. So also run <code>pre-commit install</code> to set it up. This will take care of code formatting with Black, static type checking, unit test and test coverage on every commit.</p>"},{"location":"developing/#updating-the-documentation","title":"Updating the documentation","text":"<p>The documentation is created with Material for MkDocs. Just edit the Markdown files in <code>docs</code>.</p> <p>To locally view the documentation, use this:</p> <pre><code>poetry run mkdocs serve\n</code></pre>"},{"location":"developing/#new-release","title":"New release","text":"<p>In order to create a new release, we use the <code>make-release</code> script. It requires the access credentials to GitHub and PyPI and Codecov, so only Martin can do that at this point.</p>"},{"location":"donation/","title":"Donation","text":"<p>If this project has been useful for you, and you would like to give a gift as a contribution, we would be very grateful to receive it. We have a couple of options for you.</p>"},{"location":"donation/#paypal","title":"PayPal","text":"<p>You can send money via to Chris via PayPal.</p>"},{"location":"donation/#github-sponsors","title":"GitHub Sponsors","text":"<p>You can go to our GitHub page and use the GitHub Sponsorship to donate some money.</p>"},{"location":"donation/#bitcoin","title":"Bitcoin","text":"<p>There is also the possibility to send Bitcoin. Chris has set up a donation page here:</p> <p>Donation via Tallycoin</p> <p>You can make an on-chain or Lightning donation.</p>"},{"location":"license/","title":"License","text":"<p>Copyright 2019\u20132022 Dr. Martin Ueding, Christoph Hansen</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>This is an MIT license.</p>"},{"location":"support/","title":"Support","text":"<p>The documentation hopefully answers most common question. In case you find it lacking, have a problem or want to suggest a feature, you have a couple of options.</p>"},{"location":"support/#issue-tracker","title":"Issue tracker","text":"<p>For all sorts of issues and feature requests it is easiest if you just open a new ticket in the issue tracker on GitHub. This way they are structured and I can directly reply to you.</p>"},{"location":"support/#telegram-group","title":"Telegram group","text":"<p>We also have a Telegram group where developers and users hang out, discuss the application, bugs and features.</p>"},{"location":"changelog/version-2/","title":"Version 2","text":""},{"location":"changelog/version-2/#version-200","title":"Version 2.0.0","text":"<ul> <li>Use logging library for colorful log messages.</li> <li>Add a nice documentation website.</li> <li>Add log messages via Telegram.</li> <li>Gracefully handle keyboard interrupt.</li> <li>Add <code>--keepalive</code> option again.</li> <li>Add automatic database cleaning.</li> </ul>"},{"location":"changelog/version-2/#version-210","title":"Version 2.1.0","text":"<ul> <li>Add regular Telegram messages to let user know that the program is still running.</li> </ul>"},{"location":"changelog/version-3/","title":"Version 3","text":""},{"location":"changelog/version-3/#version-300","title":"Version 3.0.0","text":"<ul> <li>Add Windows support.</li> <li>Move configuration file to a new location. Old configuration files are automatically moved.</li> <li>Read Telegram chat ID from configuration file if available. This way you only have to send it a message once.</li> <li> <p>Import modules only when needed to speed up start-up.</p> </li> <li> <p>More documentation.</p> </li> <li>Add donation page.</li> <li>Use the Black code formatter.</li> <li>Start with Pytest unittests.</li> <li>Implement command line interface with Click.</li> </ul>"},{"location":"changelog/version-3/#version-301","title":"Version 3.0.1","text":"<ul> <li>Perform evaluation with actual trigger implementations.</li> </ul>"},{"location":"changelog/version-3/#version-302","title":"Version 3.0.2","text":"<ul> <li>Buxfixes.</li> </ul>"},{"location":"changelog/version-3/#version-303","title":"Version 3.0.3","text":"<ul> <li>Change command line argument parser back to <code>argparse</code>.</li> <li>Catch another connection exception.</li> <li>Catch connection errors in Telegram logger such that there are no endless recursive log messages which crash the program.</li> <li>Fix cool-off for 06:00 checkin.</li> <li>Fix some test code.</li> </ul>"},{"location":"changelog/version-3/#version-310","title":"Version 3.1.0","text":"<ul> <li>Add evaluation interface powered by Streamlit.</li> <li>More documentation in general.</li> <li>Add installation instructions for the evaluation feature.</li> </ul>"},{"location":"changelog/version-3/#version-320","title":"Version 3.2.0","text":"<ul> <li>Add a summary table for the drop evaluation interface.</li> </ul>"},{"location":"changelog/version-3/#version-330","title":"Version 3.3.0","text":"<ul> <li>Emit the exchange rate in the buy notification.</li> <li>Add more documentation.</li> <li>Fix axes label in plot.</li> <li>Allow evaluation of multiple triggers at the same time.</li> <li>Add progress bars to the Streamlit interface.</li> </ul>"},{"location":"changelog/version-3/#version-340","title":"Version 3.4.0","text":"<ul> <li>Reflect change from <code>XBT</code> to <code>BTC</code> coding on Kraken.</li> <li>Query balances on the marketplace at startup and after each trade. A notification is send such that you always know how much fiat money is left to trade.</li> <li>In the trigger evaluation, triggers are moved to multiple rows if there are more than three of them.</li> <li>Allow trigger evaluation on a chosen subrange of dates.</li> <li>Present trigger evaluation summary as a table.</li> <li>Make plots interactive.</li> </ul>"},{"location":"changelog/version-3/#version-350","title":"Version 3.5.0","text":"<ul> <li>Add <code>--one-shot</code> to the <code>watch</code> subcommand to only run the watch loop once.</li> <li>Update documentation and state paths to the configuration file on various platforms.</li> <li>Add <code>fiat_percentage: true</code> option to create drop triggers that use a percentage of the available fiat balance instead of a fixed volume.</li> </ul>"},{"location":"changelog/version-3/#version-351","title":"Version 3.5.1","text":"<ul> <li>Fix drop trigger with percentage such that <code>volume_fiat</code> is actually a percentage and not a ratio (between 0 and 1).</li> </ul>"},{"location":"changelog/version-4/","title":"Version 4","text":""},{"location":"changelog/version-4/#version-400","title":"Version 4.0.0","text":"<ul> <li>The trigger specification is significantly changed. Consult the documentation to learn about the new format. I'm sorry for breaking your configuration, but I didn't want to provide a migration and rather deliver more new features.</li> </ul>"},{"location":"changelog/version-4/#version-410","title":"Version 4.1.0","text":"<ul> <li>Use <code>krakenex</code> instead of <code>clikraken</code> to communicate with Kraken. The old implementation is deprecated but retained with <code>--marketplace clikraken</code>.</li> <li>Add automatic withdrawal for currency when the amount exceeds a certain threshold determined by the fee. See the configuration of the Kraken marketplace for details.</li> </ul>"},{"location":"changelog/version-4/#version-420","title":"Version 4.2.0","text":"<p>\ud83e\uddea New features:</p> <ul> <li>Triggers can be given names in the evaluation interface.</li> <li>For the Kraken marketplace you can now specify whether the fees should be applied to base or quote currency.</li> <li>Attach a stack trace of exceptions to the Telegram message.</li> <li>In the drop survey evaluation one now also has a time range slider such that one can get a feeling for the drops. Some are one-time events, and others are regular patterns.</li> </ul> <p>\ud83d\udd27 Improvements:</p> <ul> <li>The reported balance at startup will only contain currencies which are used in triggers. This will remove some leftover shitcoins that people might left in their account. After a trade only the balances for that currency pair will be reported to give a cleaner report.</li> <li>The legend in the trigger simulation plot is shown below the plot to allow for longer trigger names without having them cropped.</li> <li>Triggers with failures used to get deactivated completely. Once no more triggers were active, the program was shut down. Failures stemming from insufficient funds are easily recovered from by transferring more money to the marketplace. The bot would have to be restarted afterwards. In order to make this unnecessary, failed triggers are just silenced for 12 hours. Another attempt is made automatically afterwards. This keeps the number of messages relatively low.</li> </ul> <p>\ud83e\udeb2 Bug fixes:</p> <ul> <li>Historical API was broken, it now retrieves data again.</li> <li>Specifying a lower-case fiat currency and using the percentage based fiat volume strategy led to an error. This is now fixed and the fiat currency is again case-insensitive.</li> <li>Make sure that errors from the Telegram API are reported and not ignored.</li> <li>Do not use Markdown with Telegram as parsing errors prevent messages from being sent. Plain text is not as pretty, but better have it reliable no matter which names the Triggers have.</li> <li>Errors from the historical price source have been silently ignored. They now issue a warning.</li> </ul> <p>\u2699\ufe0f Implementation details:</p> <ul> <li> <p><code>clikraken</code> has been retired and we now use <code>krakenex</code> in version 2. This version is in conflice with <code>clikraken</code>, which needs <code>krakenex</code> version 1. When you upgrade, you might see this message:</p> <p><code>ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts. clikraken 0.8.3.2 requires krakenex&lt;1.0,&gt;=0.1, but you have krakenex 2.1.0 which is incompatible.</code></p> <p>To resolve this, run <code>pip uninstall clikraken</code> or <code>sudo pip uninstall clikraken</code>, depending on whether you have installed it with <code>--user</code> in the past.</p> </li> <li> <p>Send Telegram messages via POST (and not GET).</p> </li> <li>Automatically move the SQLite database into the appropriate user data directory on Windows on macOS, no change on Linux.</li> </ul>"},{"location":"changelog/version-4/#version-421","title":"Version 4.2.1","text":"<ul> <li>When a trigger was disabled after three consecutive failures, a message stating that would be shown every time the trigger was processed. In this way the user got the same amount of messages. This message is now removed. The initial errors speak for themselves, there is no need to have this additional message.</li> </ul>"},{"location":"changelog/version-4/#version-422","title":"Version 4.2.2","text":"<ul> <li>Another warning message would use a constant that was moved to another place in the meantime. The program crashed when the message was going to be emitted. It has been removed now.</li> </ul>"},{"location":"changelog/version-4/#version-423","title":"Version 4.2.3","text":"<ul> <li>Log output is also put into the Linux system log. In this way one can do post-mortem debugging.</li> <li>Crashes have been reported when the Telegram message was longer than their limit of 4096 characters. Messages are now chunked to prevent this from happening.</li> <li>Telegram messages are no longer directly send but stored in a send-queue. This way connection outages do not yield lost messages but rather just delay sending.</li> <li>Use a proper form instead of the plain button in Streamlit.</li> </ul>"},{"location":"changelog/version-4/#version-424","title":"Version 4.2.4","text":"<ul> <li>Also handle <code>ReadTimeout</code> errors that can happen when the API doesn't answer before the connection breaks. These have been ignored previously, but now the error message is a bit cleaner.</li> </ul>"},{"location":"changelog/version-4/#version-430","title":"Version 4.3.0","text":"<p>New features:</p> <ul> <li>Add a <code>start</code> attributes to triggers.</li> <li>Add <code>--dry-run</code> option to <code>watch</code> command such that it can be tested without spending money.</li> <li>Allow specifying <code>delay</code> and <code>cooldown</code> not only in minutes as <code>delay_minutes</code> and <code>cooldown_minutes</code>, but also as <code>delay_hours</code>, <code>delay_days</code>, <code>cooldown_hours</code> and <code>cooldown_days</code>.</li> <li>Add documentation for cron to Configuration.</li> </ul> <p>Fixes:</p> <ul> <li>Remove double reports of connection errors.</li> <li>In case that the user has no drop triggers, the database cleaning interval is set to 120 minutes.</li> <li>Handle <code>requests.exceptions.ConnectionError</code> without crashing.</li> <li>Fix <code>--one-shot</code> mode. It would previously sleep for another interval and not shut down the Telegram logger, preventing the program from a clean exit.</li> </ul> <p>Development:</p> <ul> <li>Introduce a new pre-commit hook that sorts the import statements.</li> </ul>"},{"location":"changelog/version-4/#version-431","title":"Version 4.3.1","text":"<p>Fixes:</p> <ul> <li>Apparently all Kraken trades were sent in the validation mode. I have tried to fix that.</li> </ul>"},{"location":"changelog/version-4/#version-432","title":"Version 4.3.2","text":"<p>Fixes:</p> <ul> <li>Fix automatic detection of Telegram chat ID.</li> <li>Do not crash when there is no balance at Kraken.</li> <li>Also handle <code>requests.exceptions.HTTPError</code>.</li> </ul> <p>Development:</p> <ul> <li>Make the <code>marketplace</code> package isolated, only expose a limited set of attributes in <code>__init__.py</code>.</li> </ul>"},{"location":"changelog/version-4/#version-433","title":"Version 4.3.3","text":"<p>Fixes:</p> <ul> <li>Due to an incomplete refactoring the program would crash whenever there was a non-fatal exception regarding the marketplace. This should be fixed now.</li> </ul>"},{"location":"changelog/version-4/#version-434","title":"Version 4.3.4","text":"<ul> <li>The <code>--dry-run</code> option would write buys into the database, although it would not buy anything on the market. Now the database should now be changed. If you need to clean up your database, you might find sqliteman helpful for that.</li> <li>I now use the mypy static analysis and type checker, and also found a few subtle bugs with that in code paths which aren't used often.</li> </ul>"},{"location":"changelog/version-4/#version-435","title":"Version 4.3.5","text":"<ul> <li>When the balance on the marketplace is zero, withdrawals would fail and therefore crash the whole program. This is now fixed.</li> </ul>"},{"location":"changelog/version-4/#version-440","title":"Version 4.4.0","text":"<ul> <li>Major architectural change, without changes to the user.</li> <li>Add <code>test-drive</code> command to verify configuration.</li> </ul>"},{"location":"changelog/version-4/#version-441","title":"Version 4.4.1","text":"<ul> <li>More refactoring. Also update the versions of various dependencies. The Streamlit interface is now part of the main dependencies.</li> </ul>"},{"location":"changelog/version-4/#version-442","title":"Version 4.4.2","text":"<ul> <li>Streamlit doesn't easily work on the Raspberry Pi due to issues with py-arrow and the ARM CPU. I have therefore reverted these dependencies to be an extra again.</li> </ul>"},{"location":"changelog/version-4/#version-443","title":"Version 4.4.3","text":"<ul> <li>I've accidentally deleted the source code. This should be fixed now.</li> </ul>"},{"location":"changelog/version-4/#version-444","title":"Version 4.4.4","text":"<ul> <li>The Telegram sender would not shut down gracefully. I have fixed that now.</li> <li>Add <code>--version</code> option.</li> </ul>"},{"location":"changelog/version-5/","title":"Version 5","text":""},{"location":"changelog/version-5/#version-500","title":"Version 5.0.0","text":"<ul> <li>Refactor a lot more.</li> <li>Remove <code>--keepalive</code> feature, this is on by default now.</li> <li>Remove <code>--dry-run</code> feature, use the <code>test-drive</code> command instead.</li> <li>Remove <code>--one-shot</code> feature, use the loop instead.</li> </ul>"},{"location":"changelog/version-5/#version-501","title":"Version 5.0.1","text":"<ul> <li>Fix bug with marketplace factory function. Would emit <code>RuntimeError: Unsupported marketplace: &lt;vigilant_crypto_snatch.configuration.yaml_configuration.YamlConfiguration object at 0x7f2b3a031840&gt;</code>.</li> </ul>"},{"location":"changelog/version-5/#version-502","title":"Version 5.0.2","text":"<ul> <li>The Telegram connector would hang during shutdown, I have fixed that again.</li> </ul>"},{"location":"changelog/version-5/#version-503","title":"Version 5.0.3","text":"<ul> <li>Catch <code>requests.exceptions.ConnectionError</code>, which wasn't caught by the krakenex library. Now it will be converted into an error on the module level.</li> </ul>"},{"location":"changelog/version-5/#version-510","title":"Version 5.1.0","text":"<ul> <li>Print out version number during startup.</li> <li>Add trigger option <code>fear_and_greed_index_below</code>.</li> </ul>"},{"location":"changelog/version-5/#version-520","title":"Version 5.2.0","text":"<ul> <li>Fear &amp; Greed is now included in the evaluation interface.</li> <li>More refactoring, more test coverage.</li> <li>Developer documentation includes a component diagram.</li> </ul>"},{"location":"changelog/version-5/#version-521","title":"Version 5.2.1","text":"<ul> <li>Allow any log level for Telegram, including <code>debug</code>.</li> <li>Attempt withdrawal after the trade has been noted in the database. Previously, a failure during withdrawal would have dropped the trade and eventually performed it again.</li> <li>Output full exception traceback for every caught exception into the debug logging channel.</li> <li>Pause triggers for 24 hours when they have insufficient funds. This will reduce failure messages from three per 12 hours to one per 24 hours.</li> </ul>"},{"location":"changelog/version-5/#version-530","title":"Version 5.3.0","text":"<ul> <li>Add a report page about user trades into the evaluation interface.</li> <li>Link to download statistics within documentation.</li> <li>Add GitHub funding.</li> <li>Connection errors are not reported all the time, instead they are just logged as debug output.</li> <li>Create <code>AssetPair</code> data structure so better structure the code internally.</li> <li>Remove usage of <code>Protocol</code> such that Python 3.7 is still supported.</li> <li>Update developer documentation a bit.</li> <li>Update Pillow for security.</li> </ul>"},{"location":"changelog/version-5/#version-531","title":"Version 5.3.1","text":"<ul> <li>Fix bug in trade report with <code>KeyError: 'coin'</code>.</li> </ul>"},{"location":"changelog/version-5/#version-540","title":"Version 5.4.0","text":"<ul> <li>Add optional and voluntary telemetry sending via Sentry. See the configuration for details and how to enable it, if you want to.</li> <li>Add a dark mode to the documentation.</li> <li>Split configuration documentation onto multiple pages.</li> </ul>"},{"location":"changelog/version-5/#version-541","title":"Version 5.4.1","text":"<ul> <li>Remove the telemetry stuff again.</li> <li>Split usage documentation onto multiple pages.</li> <li>Restore Windows support by only adding syslog on Linux.</li> </ul>"},{"location":"changelog/version-5/#version-542","title":"Version 5.4.2","text":"<ul> <li>Fix path handling to database on Windows.</li> </ul>"},{"location":"changelog/version-5/#version-543","title":"Version 5.4.3","text":"<ul> <li>The database cleaning trigger would always clean all historic prices which were two hours in the past. Therefore all old prices would vanish and a lot of calls to CryptoCompare were done. This depleted the API volume needlessly.</li> <li>The Fear and Greed index sometimes doesn't deliver a value for the current day. In this case we will try the value from yesterday. If that doesn't exist as well, the failure will just be logged, without crashing the program.</li> </ul>"},{"location":"changelog/version-5/#version-544","title":"Version 5.4.4","text":"<ul> <li>The <code>krakenex</code> library would sometimes also raise a <code>requests.exceptions.ReadTimeout</code>, which was not caught. The program would crash. This exception type is now caught as well.</li> </ul>"},{"location":"changelog/version-5/#version-550","title":"Version 5.5.0","text":"<ul> <li>The CCXT library is now supported and gives access to more over a 100 more exchanges.</li> <li>Add an asset pair selector in the trade overview panel in the evaluation interface. Also add documentation for the trade overview.</li> <li>It is now an error when either drop percentage or delay is given, but not both at the same time. Previously this would have lead to a simple delay trigger, although the user likely wanted to have a drop trigger. The error message will make it clear that users have to update their configuration.</li> <li>The <code>--marketplace</code> command line option has been removed, the marketplace is now chosen via an entry in the configuration file.</li> </ul>"},{"location":"changelog/version-5/#version-560","title":"Version 5.6.0","text":"<ul> <li>Add support for notifications via notify.run to provide an alternative to Telegram.</li> <li>Also catch <code>HTTPError</code> in the krakenex wrapper.</li> </ul>"},{"location":"changelog/version-5/#version-570","title":"Version 5.7.0","text":"<ul> <li>A completely new GUI using Qt is now part of the project.</li> <li>The trigger <code>start</code> attribute used to discard the time part, if it was given. The start was always taken to start from midnight. This is fixed in this version.</li> </ul>"},{"location":"changelog/version-5/#version-580","title":"Version 5.8.0","text":"<ul> <li>All triggers now need to have an explicit name set in the configuration.</li> <li>Before a trigger is executed, the balance will be checked. Only if sufficient balance is on the marketplace, an attempt to buy is made. It may still fail because there is insufficient balance depending on the way that fees are computed.</li> <li>The GUI has an improved status and about screen.</li> <li>The GUI now shows a system tray icon and can send notifications.</li> <li>Logo added to the GUI window.</li> </ul>"},{"location":"changelog/version-5/#version-581","title":"Version 5.8.1","text":"<ul> <li>Allow setting a start date and time in the GUI.</li> </ul>"},{"location":"changelog/version-5/#version-590","title":"Version 5.9.0","text":"<p>This release features a lot of work on the GUI:</p> <ul> <li>Move some functionality into a main menu and separate windows.</li> <li>Add a separate window to see log messages.</li> <li>Add the trigger simulation functionality previously only available in the Streamlit interface.</li> <li>Use PySide6 instead of PyQt6 such that the whole project is under the MIT licence again.</li> <li>Add drop percentage to the trigger edit window.</li> <li>Add test buttons for each tab of the configuration, such that one can test each thing independently of the others.</li> <li>Add CCXT configuration to GUI.</li> </ul>"},{"location":"changelog/version-5/#version-591","title":"Version 5.9.1","text":"<ul> <li>Try to support both versions of Streamlit, the one with the old <code>streamlit.cli</code> and the one with the new <code>streamlit.web.cli</code> module.</li> </ul>"},{"location":"changelog/version-5/#version-592","title":"Version 5.9.2","text":"<ul> <li>Remove check for <code>st._is_running_with_streamlit</code>. This used a private attribute of the module, therefore it was just a question of time until it was removed or renamed.</li> </ul>"},{"location":"configuration/general/","title":"General Configuration","text":"<p>Unfortunately we need to configure a few things before you can start automatic trading with this software. These pages will show the configuration options for both the GUI and the command line. In the GUI you fill need to use File \u2192 Settings to open the settings dialog.</p> <p>This page does not contain all the necessary configuration steps, also see the navigation for further pages on marketplaces, triggers and notifications.</p>"},{"location":"configuration/general/#configuration-file-for-command-line","title":"Configuration file for command line","text":"<p>If you want to use the command line, and not the graphical user interface, you will need to create a configuration file. The GUI will automatically create that for you, so this is only necessary when you do not want to or cannot use the GUI. The configuration is done in a YAML file. It is a syntax for hierarchical data and relies on indentation to show the hierarchy.</p> <p>The configuration file needs to be created with a (programmer's) text editor. We will talk you through the necessary steps and show snippets to put into. Depending on your platform, the path should be this:</p> Platform Location Linux <code>~/.config/vigilant-crypto-snatch/config.yml</code> Windows <code>C:\\Users\\&lt;User&gt;\\Application Data\\Martin Ueding\\vigilant-crypto-snatch\\config.yml</code> macOS <code>~/Library/Application Support/vigilant-crypto-snatch/config.yml</code>"},{"location":"configuration/general/#polling-interval","title":"Polling interval","text":"<p>First you should set the polling interval that the main loop should use. It will wait this many seconds before checking again. For testing we found that 5 seconds is a good value, for production use it doesn't need to be that fine grained. Many people use 60 seconds, but one can also use a whole hour.</p> <p>In the GUI you can set this in the first tab.</p> <p></p> <p>For the configuration file you enter it like this:</p> <pre><code>sleep: 60\n</code></pre>"},{"location":"configuration/general/#historic-price-api","title":"Historic price API","text":"<p>In order to find a drop in the price, we need to know the historic price at a given point. We use Crypto Compare for that as they provide a free API. Go to their website and create an API key.</p> <p></p> <p>And retrieve your API key:</p> <p></p> <p>Then enter the API key in the next tab:</p> <p></p> <p>In the configuration file add the following:</p> <pre><code>cryptocompare:\n  api_key: \"your API key here\"\n</code></pre>"},{"location":"configuration/marketplace/","title":"Marketplaces","text":"<p>We currently support two marketplaces directly, Bitstamp and Kraken. We support many more via the CCXT library. You only have to configure one of them, but you can also configure multiple.</p> <p>You just have to specify which marketplace you want to use. Either do that on the General settings screen, or via another entry in the YAML file:</p> <pre><code>marketplace: \"kraken\"\n</code></pre> <p>You can specify either <code>kraken</code>, <code>bitstamp</code> or <code>ccxt</code>. The default currently is <code>kraken</code>.</p>"},{"location":"configuration/marketplace/#kraken","title":"Kraken","text":"<p>Go to the Kraken API key page and create an API key which has the permission to trade.</p> <p>There you need to create a new API key:</p> <p></p> <p>Be sure to select the Create &amp; Modify Orders permission such that the program can actually execute orders. Give the least amount of permissions, you should not select Withdraw Funds if you don't want to enable the automatic withdrawal feature described below.</p> <p></p> <p>You will get an API key and an associated secret. In the GUI there are fields for that:</p> <p></p> <p>In the configuration file you add a paragraph like the following. The first will be API key and the second will be the secret, like this:</p> <pre><code>kraken:\n  key: \"YOUR KEY\"\n  secret: \"YOUR SECRET\"\n</code></pre>"},{"location":"configuration/marketplace/#fee-policy","title":"Fee policy","text":"<p>When you trade, you will have to pay a certain fee that depends on your Kraken account tier. Whatever these are exactly, you can choose whether you would like to have them taken away from your fiat or coin amount. If you let it take away from your coin amount, buying coin for 50 EUR will only cost exactly that, but you get a bit less coin. Should you rather choose to have it taken in fiat, you will get as much coin as you want, but it will cost you more fiat.</p> <p>Kraken supports this as a flag to <code>addOrder</code> and has two options:</p> <ul> <li><code>fcib</code> prefer fee in base currency (default if selling)</li> <li><code>fciq</code> prefer fee in quote currency (default if buying, mutually exclusive with <code>fcib</code>)</li> </ul> <p>As explained in their glossary, the quote currency is fiat, whereas the base currency is the coin.</p> <p>We support this choice via the option <code>prefer_fee_in_base_currency</code>, which is false by default, so the fee is preferred in quote currency. If you set this to true, you can instead have it in the base currency and only spend exactly as much as you want.</p> <p>In the GUI it is just a checkbox, in the configuration file you need to specify this:</p> <pre><code>kraken:\n  \u2026\n  prefer_fee_in_base_currency: true\n</code></pre>"},{"location":"configuration/marketplace/#automatic-transfer-to-wallet","title":"Automatic transfer to wallet","text":"<p>For this marketplace we support automatic transfers to an external wallet when the crypto volume is large enough. We query the current fees and only do the transfer when the fees are below a certain percentage of the value to transfer.</p> <p>In order to set this up, you first need to have a withdrawal target. Go to the funding page, click on withdraw BTC for example. Then use \u201cAdd Address\u201d to create a new address and give it some name. I call mine simply \u201cWallet\u201d.</p> <p>In the GUI you can add withdrawal entries and configure each like this:</p> <p></p> <p>In the configuration file, you add a section <code>withdrawal</code> to the <code>kraken</code> section:</p> <pre><code>kraken:\n  \u2026\n  withdrawal:\n    BTC:\n      target: \"Wallet\"\n      fee_limit_percent: 1.0\n</code></pre> <p>The API key that you use must have the Withdraw Funds permission.</p> <p>After each trade the program will check whether you are above the fee limit and start the transfer. This way you can have your marketplace account as empty as you like.</p>"},{"location":"configuration/marketplace/#bitstamp","title":"Bitstamp","text":"<p>In order to use Bitstamp, you need to set up an API key with them that has the correct permissions to trade with. Go to the settings menu and create a new key.</p> <p></p> <p>For the GUI you just fill in these three lines.</p> <p></p> <p>In the configuration file you need to add this paragraph:</p> <pre><code>bitstamp:\n  username: \"username here\"\n  key: \"key here\"\n  secret: \"secret here\"\n</code></pre>"},{"location":"configuration/marketplace/#other-exchanges-via-ccxt","title":"Other exchanges via CCXT","text":"<p>Via the CCXT library we also support a long list of exchanges. We don't fully wrap the CCXT library but rather expose it to the user. This way you can use all the exchanges directly without us having to change this software at all. The caveat is that it is not directly clear what the configuration parameters should be. Likely most exchanges expect <code>apiKey</code> and <code>secret</code>.</p> <p>In our configuration file you specify a block for <code>ccxt</code> and then name the exchange you want to use, taken from their list of exchanges. In the <code>parameters</code> section you specify the necessary parameters. We will pass those directly to CCXT.</p> <pre><code>ccxt:\n  exchange: kraken\n  parameters:\n    apiKey: \"\u2026\"\n    secret: \"\u2026\"\n</code></pre> <p>In the GUI you can also fill this in, for the parameters you just put the two last lines in.</p>"},{"location":"configuration/notifications/","title":"Notifications","text":"<p>Optionally you can set up notifications via several external services. This is not required, but a nice extra to allow monitoring from anywhere. You can configure zero or multiple notification providers, they will then all be used in parallel.</p>"},{"location":"configuration/notifications/#logging-level","title":"Logging level","text":"<p>The <code>level</code> specified the messages that you want to receive. <code>info</code> gives sensible information, if you only want to receive information when something goes wrong, use <code>warning</code>. See the section in running for more details.</p> <p>The severity of messages is color-coded with an emoji according to this mapping:</p> Symbol Severity \ud83d\udd34 Critical \ud83d\udfe0 Error \ud83d\udfe1 Warning \ud83d\udfe2 Info \ud83d\udd35 Debug <p>The logging level is set to Info by default.</p>"},{"location":"configuration/notifications/#telegram","title":"Telegram","text":"<p>One popular choice for notifications is Telegram. First you have to create a bot by talking to @botfather. It will lead you through a couple of steps:</p> <ol> <li>Type <code>/start</code> to initiate the bot creation.</li> <li>Then type <code>/newbot</code> to create your bot.</li> <li>It will ask you for the name of the bot. You can just use \u201cvigilant-crypto-snatch\u201d or something else.</li> <li>Next it will ask for a username of the bot. This is a technical thing, so it doesn't need to be pretty. It needs to be unique and end with <code>bot</code>. So perhaps use something like <code>vigilant_0f8704a83991_bot</code>, where you just make up your own random letters.</li> </ol> <p>It will give you an access token that you can use for the API. Enter that token into the GUI here:</p> <p></p> <p>You can click on Test to have it send a test message.</p> <p>In the configuration file you add another paragraph:</p> <pre><code>telegram:\n  token: \"Your bot token here\"\n  level: info\n</code></pre> <p>You will need to write a message to the bot in order to open a direct conversation with it. This is necessary such that the bot can reply to you.</p> <p>If the Telegram bot token is set up correctly, you will receive messages like this:</p> <p></p>"},{"location":"configuration/notifications/#notifyrun","title":"notify.run","text":"<p>The service notify.run offers free notifications which are very simple to set up. One does not need to register, one can just create a new channel. They recommend to not send private data the service. As I understand it, if somebody was to guess the channel ID (unlikely), they would be able to see all notifications. Also, it is not clear where the data is stored and for how long. </p> <p>Go to their website, click on \u201ccreate a channel\u201d. It will give you a channel ID, which you need to add to the configuration file like so:</p> <pre><code>notify_run:\n  channel: \"\u2026\"\n  level: info\n</code></pre> <p>This is not available in the GUI.</p>"},{"location":"configuration/triggers/","title":"Triggers","text":"<p>You can define as many triggers as you would like. This is done in a section <code>triggers</code>.</p> <p></p> <p>You can add as many as you would like, and the options look like this:</p> <p></p> <p>In the configuration file it would look like this:</p> <pre><code>triggers:\n- name: \"Large drops\"\n  coin: btc\n  fiat: eur\n  cooldown_minutes: 1440\n  volume_fiat: 26.0\n  delay_minutes: 1440\n  drop_percentage: 10\n- name: \"Medium drops\"\n  coin: btc\n  fiat: eur\n  cooldown_minutes: 1440\n  volume_fiat: 26.0\n  delay_minutes: 1440\n  drop_percentage: 5\n- name: \"Regular\"\n  coin: btc\n  fiat: eur\n  cooldown_minutes: 5000\n  volume_fiat: 26.0\n</code></pre> <p>There are different sub-types of triggers, but all of them have the following elements in common:</p> <ul> <li><code>coin</code>: The name of the crypto-currency, case insensitive.</li> <li><code>fiat</code>: The name of the fiat currency, case insensitive.</li> <li><code>cooldown_minutes</code>, <code>cooldown_hours</code>, <code>cooldown_days</code>: Time until a trigger can fire again. If multiple ones are given, only the one with the largest unit will be used.</li> <li> <p><code>name</code>: Human-readable name of the trigger.</p> <p>The internal name of the trigger can be derived from the options. This will give you technical names in notifications, so you might prefer to give them personal names. Additionally the name is used in the database to compute the cooldown. If you don't have a name specified and change any of the parameters, the internal name will change and cooldown doesn't apply any more.</p> </li> <li> <p><code>start</code>: Optional date time string which specifies the earliest execution of the trigger.</p> <p>This can be used if you have just created a bunch of new triggers, or made changes to them without keeping the <code>name</code> attribute fixed. By specifying a future point in time you can prepare a trigger without having it executed on the next run of the program.</p> <p>We use <code>dateutil.parser</code> to parse the date. It will understand most formats, but the ISO format (<code>YYYY-MM-DD HH:MM:SS</code>) will certainly work.</p> </li> </ul>"},{"location":"configuration/triggers/#trigger-strategy","title":"Trigger strategy","text":"<p>We currently have two optional trigger strategies. All strategies also use the cooldown. If you do not specify any strategy keys, then it will just buy whenever the cooldown has expired. This is the \u201cDollar cost average\u201d way.</p> <p>You can use as many strategies as you like. They are connected via logical and, meaning that all strategies have to say \u201cbuy\u201d in order for the trigger to fire.</p>"},{"location":"configuration/triggers/#drop-strategy","title":"Drop strategy","text":"<p>The first strategy is the drop strategy. It will look whether the price has dropped by a given percentage within a given delay. You could for instance look for a drop of 1 % within 60 minutes. You will need to specify these keys:</p> <ul> <li><code>drop_percentage</code></li> <li><code>delay_minutes</code>, <code>delay_hours</code> or <code>delay_days</code>: If multiple are given, only the one with the largest unit will be used.</li> </ul> <p>You can specify a decimal number for the drop percentage, just be aware that it must contain a decimal point instead of a decimal comma.</p>"},{"location":"configuration/triggers/#fear-greed-strategy","title":"Fear &amp; Greed strategy","text":"<p>There is the Fear &amp; Greed Index, which provides a market analysis via multiple factors. It is a number between 0 and 100. Low numbers mean that people are fearful and it might be good to buy. And high numbers mean that people are greedy and it might be a bad idea to buy.</p> <p>You can specify the following key to make use of this strategy.</p> <ul> <li><code>fear_and_greed_index_below</code>: An integer value between 0 and 101 which is the exclusive upper limit for the fear and greed index. If you specify 50, then it will only buy for 49 or below.</li> </ul>"},{"location":"configuration/triggers/#fiat-volume-strategy","title":"Fiat volume strategy","text":"<p>There are two ways that you can determine the amount of fiat volume that you want to spend on each trigger execution.</p> <p>First there is the fixed strategy, where you always spend a fixed amount. For that you need this key:</p> <ul> <li><code>volume_fiat</code>: Amount in fiat currency.</li> </ul> <p>Alternatively you can specify a percentage of the amount of fiat currency that you have on the market. For this specify a percentage:</p> <ul> <li><code>percentage_fiat</code>: Percentage of fiat money to spend in each buy.</li> </ul>"},{"location":"configuration/triggers/#choosing-sensible-values","title":"Choosing sensible values","text":"<p>But what shall I choose? What will give me the most return of investment? We don't have the truth either, but we recommend that you take a look at the evaluation interface that is linked on the usage page. The heatmap of drops gives you a good idea of which delays and drop percentages to use. The trigger simulation gives you an idea of how often they fire, and let you choose the amount of fiat to spend.</p> <p>You can also come to the Telegram group, see support, and ask other users for their experience.</p>"},{"location":"dev/components/","title":"Components","text":"<p>This project aims to be organized according to the Clean Architecture. There are many components, and they only depend on each other in an acyclic way. First we show a diagram which contains just opaque components. The parts from this software are yellow, the external libraries are in blue.</p> <p></p> <p>You can see that is a nice directed acyclic graph, and that the core component is independent of any external libraries.</p> <p>On this page we will go through all the components and how they interact with each other. This shall give you an overview of the architecture of this software.</p>"},{"location":"dev/components/#core","title":"Core","text":"<p>At the center there are the core entities, the data classes which don't depend on anything else. These are the classes representing <code>Price</code> and <code>Trade</code>.</p> <p></p> <p>These are implemented as <code>dataclasses</code>.</p>"},{"location":"dev/components/#datastore","title":"Datastore","text":"<p>The next component is the data storage. We have an interface which allows to store price and trade objects and retrieve them. We also have a clean-up operation, and two specific queries.</p> <p></p> <p>It is implemented using simple lists for testing, and also using the SQL Alchemy library. One can see that although this depends on an external library, it is only used in a concrete implementation of the interface. The other code doesn't expliclty depend on this storage implementation but only on the interface. And thus we have decoupled it.</p>"},{"location":"dev/components/#marketplace","title":"Marketplace","text":"<p>Since we buy crypto currency, we need to have a marketplace. This is also hidden behind the <code>Marketplace</code> interface which offers a few functions. It is not a complete wrapper of any particular marketplace, but just what we need in this project.</p> <p></p> <p>There are two concrete implementations, namely for the Kraken and Bitstamp exchanges. These implementations depend on the external libraries. Again the remainder of the code only depends on the interface.</p>"},{"location":"dev/components/#my-requests","title":"My Requests","text":"<p>There are multiple parts in the code where I need to issue HTTP requests. For this the <code>requests</code> library is an excellent choice. I just don't want the exception handling to spill all over my code, so I wrap it and just catch all possible exceptions there.</p> <p></p>"},{"location":"dev/components/#historical","title":"Historical","text":"<p>In order to find drops, we need to know the prices in the past. These are provided by a historical source, which delivers price objects.</p> <p></p> <p>There are many different implementations. One just asks the marketplace for the current price, that only works when the specified time is right now. For older times we can have a look into the database. But if there is no appropriate price available, it will ask on Crypto Compare. To the remainder of the program everything is hidden behind that interface.</p>"},{"location":"dev/components/#fear-greed","title":"Fear &amp; Greed","text":"<p>For the \u201cFear &amp; Greed Index\u201d we need to query the API. This again has an interface, such that we can test it.</p> <p></p>"},{"location":"dev/components/#triggers","title":"Triggers","text":"<p>The triggers get specified by the user. I have generalized the trigger concept such that it just handles regular actions. These also include database cleaning and sending a Telegram notification. For the buy triggers there is a specification, the <code>TriggerSpec</code>.</p> <p></p> <p>The buy trigger uses two delegates as part of the strategy pattern. One is used to determine the amount of fiat money to spend, the other is whether the trigger should be considered active. This lets us mix and match these algorithms without having an exploding inheritance hierarchy.</p> <p>Dependencies to other parts of the code are via the interfaces only, this way it is decoupled.</p>"},{"location":"dev/components/#paths","title":"Paths","text":"<p>We need to know where to store and load configuration files, database files and cached information. For this we have the collected the paths in a module.</p> <p></p> <p>This uses the <code>appdir</code> library to get user directories in a system independent manner.</p>"},{"location":"dev/components/#telegram","title":"Telegram","text":"<p>The message sending to Telegram is implemented as a logger with the Python standard library <code>logging</code> facilities. I have a logger which extends the handler. In this way I depend on something external, but it is pluggable via the logging handler mechanism in the standard library.</p> <p></p> <p>I use the requests library for the HTTP requests, which I did not hide behind an interface.</p>"},{"location":"dev/components/#configuration","title":"Configuration","text":"<p>The configuration shall be independent of the file format used, it should provide some migrations and so on. All the parsing should be done there as well. At the moment I have a bunch of free functions, and they pass around lists and dicts.</p> <p></p> <p>I am not that happy with that yet, I would like to have an interface there as well in order to mock that for tests.</p>"},{"location":"dev/components/#commands","title":"Commands","text":"<p>The main commands then import a bunch of the concrete classes and instantiates that. This is okay, because that is on the outside ring of my architecture.</p> <p></p>"},{"location":"dev/components/#everything","title":"Everything","text":"<p>I also have a diagram where everything is put together. It is quite big, so click on it to view the full graphics.</p> <p></p> <p>It is a bit harder to see, but the dependencies are acyclic. You can also see this from this page, where I was able to introduce the parts without having to forward declare something to be used later. Everything neatly built atop of existing things only.</p>"},{"location":"gui/start/","title":"Getting Started with the GUI","text":"<p>We will start with usage of the graphical user interface (GUI) and show the command line on subsequent pages.</p> <p>To start the graphical user interface, you have to open a command line (cmd on Windows, Terminal on Mac) and enter either <code>vigilant-crypto-snatch-qt</code> or something like <code>~/.local/bin/vigilant-crypto-snatch-qt</code>. After pressing Enter you will see the main screen:</p> <p></p> <p>When you start it up for the first time, the three panels will be empty until you have configured the program. Before going through the details of that, we want to show how the program is used once you have it configured and create some motivation to go through the configuration process.</p> <p>You have three panels there, Balances, Spot Prices and Triggers. The balances are all balances of relevant currencies on the configured marketplace. You can see that the author has like 52.98 EUR on his account, and no BTC at all. On the left you see the spot prices for all configured currencies. The author only buys BTC, so only that shows up there.</p> <p>The bottom panel shows the triggers. These are rulesets for buying under certain conditions. You can see one trigger per line, and one rule per column. So the first three triggers have cooled down, whereas the fourth has not. But the first three triggers wait for the drop, whereas the fourth has no drop rule.</p>"},{"location":"gui/start/#trigger-simulation","title":"Trigger simulation","text":"<p>In order to get a feel for the trigger rules, you can simulate them. We will also take this to explain how the triggers work.</p> <p>Use the main menu Simulation to open up the simulation window:</p> <p></p> <p>On the top left you configure your trigger. It has to have a unique name in order to be identifiable in the database. This name should not be changed, or the cooldown (see next paragraph) will not work. It will work with a certain currency pair, you just enter the regular abbreviations of the currencies.</p> <p>The first interesting rule is the cooldown. We don't want triggers to trigger multiple times in rapid succession, depleting your fiat funds. Therefore they always have a cooldown associated. You can choose it as short as you like.</p> <p>Next you need to specify how much volume is to be invested. This can either be an absolute amount, where in the screenshot it would be 100 EUR. Alternatively you can select the percentage variant, and then the value will be a percentage.</p> <p>The delay is an optional setting, which must be set together with drop. The idea is that if the price has dropped a certain percentage compared to a reference point, the coin may be undervalued and it is a really good time to buy. If you set the delay to one week, and the percentage to 20 %, it will buy if the price right now is 20 % below the price of one week ago. As one can see in the upper center graph, the price has rapidly fallen from around 29.000 EUR/BTC to around 19.000 EUR/BTC in the course of a few days. That is a drop of 34 % within a few days. But there are also smaller-scale drops, which might also be interesting to invest in.</p> <p>The Fear &amp; Greed index is a market sentiment estimation, which ranks from 0 (pure fear) to 100 (extreme greed) and basically means whether the coin is undervalued or overvalued. This not only takes into account the price itself, but also some other information sources. This can also be used as an additional rule.</p> <p>Sometimes one doesn't want a trigger to start right away. One can use the start attribute to delay it into the future. If one sets it to some value in the past, it is effectively unset.</p> <p>You can combine the additional rules for drop, fear &amp; greed and the start freely. If you don't specify any additional rules, you end up with a plain dollar cost average where you buy coins whenever the cooldown finishes.</p> <p>Once you have put in the parameters, you can simulate the triggers. You can see a table of the purchases in the bottom center. Each trigger execution is one line in the table. The bottom right graph shows the money invested as well as the value of the investment at the given point in time. The bottom left table shows a summary of each simulation. This way you can run a bunch of simulations and still compare to previous runs.</p>"},{"location":"gui/start/#log-messages","title":"Log messages","text":"<p>In case you experience strange things, have a look into the log messages via the Help menu. There you find the latest log messages at the bottom.</p> <p></p> <p>Consider copying these error messages when you report a bug.</p>"},{"location":"gui/start/#version-information","title":"Version information","text":"<p>In case you want to know which version is installed, you can click on About in the Help menu to see the version:</p> <p></p> <p>A link to this online documentation is also included.</p>"},{"location":"gui/start/#trades-overview","title":"Trades overview","text":"<p>Once you have the program configured and running for a while, you can see your trades in the overview panel. Go to Report and select the trade report:</p> <p></p> <p>This lists the amount of fiat you spend, how much coin you got, which trigger executed that trade, and how much the current value of that coin is. In this screenshot you can see how the author has bought close to the all time high, and the value has fallen dramatically, resulting in a severe loss if sold at that point in time.</p>"},{"location":"installation/general/","title":"Installation","text":"<p>This program is implemented in Python, so you will have to install the Python interpreter first. We will show you the necessary steps for your platform.</p> <p>The way to install Python on Windows, Mac and Linux are completely different, we are going through the different systems one by one. You can use the navigation to directly jump to your platform, if you want. We also need to install different parts of this project on the platforms, so we have structured it directly by platform.</p>"},{"location":"installation/general/#on-windows","title":"On Windows","text":"<p>For Windows, you can download Python via the Python website:</p> <p></p> <p>Then download the Windows Installer for 64-Bit:</p> <p></p> <p>Launch the installer, and add Python to the PATH. This will make it easier later on.</p> <p></p> <p>Then just press \u201cInstall Now\u201d.</p> <p>After the setup has gone through, it will allow you to extend the command line limit. This might be necessary, I would just do that.</p> <p></p> <p>Then you are finished and have Python installed on your system. We can then proceed to install the program.</p> <p>Then open a command line by pressing Windows and type \u201ccmd\u201d to launch the command line. You will see a window like this:</p> <p></p> <p>Then type <code>pip install 'vigilant-crypto-snatch[evaluation,gui]'</code> and press Enter. It will start to download the latest version of the program:</p> <p></p> <p>Eventually it will finish and show you the command line again:</p> <p></p> <p>You should be able to start <code>vigilant-crypto-snatch</code> without arguments by typing that now:</p> <p></p> <p>If you get this help screen, then everything is installed correctly.</p>"},{"location":"installation/general/#on-mac","title":"On Mac","text":"<p>On the Mac, use Spotlight to open the Terminal application. Then just type <code>python3</code>. A dialog window should open and ask you to install some developer tools. Do that, and you should have Python installed.</p> <p>Once this is installed, you can install it by typing <code>pip install 'vigilant-crypto-snatch[evaluation,gui]</code> at the command prompt. It should download the program.</p>"},{"location":"installation/general/#on-linux-desktop-or-laptop","title":"On Linux desktop or laptop","text":"<p>Major Linux distributions directly ship with Python, so you don't need to install the Python interpreter yourself, it is already there.</p> <p>All you need to do is to open a terminal type <code>pip install 'vigilant-crypto-snatch[evaluation,gui]</code>. This will install the project for your user only.</p> <p>You have to make sure that <code>~/.local/bin</code> is part of your <code>PATH</code> environment variable such that you can start the program.</p> <p>If you want to install it for all users into the system path, you can also prepend a <code>sudo</code> to the command line. This way it will be installed into <code>/usr/local/bin</code> and you don't have to worry about the path.</p>"},{"location":"installation/general/#on-raspberry-pi","title":"On Raspberry Pi","text":"<p>Raspbian, the Debian variant for the Raspberry Pi, already has Python installed. Do you just need to install this program here.</p> <p>To install the program, open a terminal and type <code>pip install 'vigilant-crypto-snatch</code>. This will install the project for your user only. Because the ARM architecture is not supported by the PySide6 library, you cannot use the GUI on the Raspberry Pi.</p> <p>You have to make sure that <code>~/.local/bin</code> is part of your <code>PATH</code> environment variable such that you can start the program.</p> <p>If you want to install it for all users into the system path, you can also prepend a <code>sudo</code> to the command line. This way it will be installed into <code>/usr/local/bin</code> and you don't have to worry about the path.</p>"},{"location":"installation/general/#upgrades","title":"Upgrades","text":"<p>If you want to upgrade to the latest version, use:</p> <pre><code>pip install 'vigilant-crypto-snatch[evaluation,gui]' --upgrade\n</code></pre> <p>In case you have installed it differently, you will likely also need to upgrade in the same way.</p>"},{"location":"usage/evaluate/","title":"Trigger Simulator","text":"<p>It is not inherently clear how triggers should be set. There are multiple variables that have to be tuned for each trigger:</p> <ul> <li>Time delay</li> <li>Cooloff</li> <li>Drop percentage</li> <li>Fiat volume</li> </ul> <p>We can try to verify a given strategy using historical data. We can also use the historical data to get an idea of a good strategy. Then we just simulate the given triggers and see how they perform.</p> <p>We provide a fun experimentation interface which is built with Streamlit and runs directly in your browser.</p> <p></p> <p>This interface can be used online using the hosted version. Alternatively it can be started locally using the <code>evaluate</code> subcommand without any additional parameters:</p> <pre><code>vigilant-crypto-snatch evaluate\n</code></pre> <p>You can then select a crypto and a fiat currency to use for the analysis. Then you can just switch between the various tools that are offered. These are described below.</p>"},{"location":"usage/evaluate/#possible-errors","title":"Possible errors","text":"<p>It might be possible that you cannot start the Streamlit interface. The most basic error could be an <code>ImportError</code> saying that the package <code>altair</code> or <code>streamlit</code> could not be imported. In that case you haven't installed the evaluation extra. See the installation instructions on the front page.</p> <p>While starting it, you might get an error about too many files connected via inotify. In this case you need to create a file at <code>.streamlit/config.toml</code> and give it this content:</p> <pre><code>[server]\nfileWatcherType = \"none\"\n</code></pre>"},{"location":"usage/evaluate/#price-tool","title":"Price tool","text":"<p>Here you can just see the prices that we got from the historical API. This is nothing special, just a plot.</p> <p></p> <p>These plots are slightly interactive, so you can make them fullscreen and they will render with higher quality.</p>"},{"location":"usage/evaluate/#trigger-simulation-tool","title":"Trigger simulation tool","text":"<p>You simulate triggers on historical data. You can limit the evaluation data to a given range. Unfortunately Streamlit doesn't support a range slider yet, so the numbers don't make so much sense. The actual date is shown right below and will be updated as you move the slider.</p> <p></p> <p>You can simulate as many triggers as you like. Set the number that you want and then just select the type of trigger and tune the parameters to your liking.</p> <p></p> <p>It will give you a summary table looks like this:</p> <p></p> <p>You can make this table full screen and also sort by any column. Just click on a column header and it will sort.</p> <p>You will also get a plot which shows the amount of money you have invested as well as the value of the crypto assets aquired. With this you can get a sense on the gains.</p> <p></p> <p>The plot is interactive, you can pan and zoom with the mouse.</p> <p>You also have a table with the trades that were performed.</p> <p></p> <p>In case the trigger has not been executed once, you will of course get a message.</p>"},{"location":"usage/evaluate/#drop-survey-tool","title":"Drop survey tool","text":"<p>Fiddling with individual triggers can be informative, but a more meta view could be very helpful. For this all sorts of drop triggers are performed, with a grid of various delays and various drop percentages.</p> <p>You can control the ranges of both with two-way sliders.</p> <p></p> <p>Each time such a trigger is executed a fixed unit of fiat currency is invested. At the end of the time period the amount of crypto currency is normalized by the amount of fiat currency spent. This will show the most efficient triggers. It doesn't show how often these triggers have been used, or how much crypto currency you will have in the end.</p> <p></p> <p>In the resulting heat map you can see colored areas where the most gains are in a dark red. In regions where the trigger has never been executed, you will just see black. These regions indicate that there was no such drop in the period looked at.</p> <p>Likely there will be one really dark area. This is an artefact from a single large drop in the past three months. Of course this is the best drop trigger for that particluar period, but it does not really generalize. So be wary that different historical periods look differently.</p> <p>Use this plot to get a general sense of fluctuations in the market and which triggers would fire often and form a good base strategy. In the above image, having a trigger at around 10 % and 24 hours delay seems to be a reasonable choice.</p> <p>You might still want to include some really ambitious triggers such that you can realize large gains. For instance having one for 25 % within 48 hours could be a good idea.</p>"},{"location":"usage/evaluate/#trade-overview","title":"Trade overview","text":"<p>When you use the evaluation interface locally with your database, you can also see an overview over all the recorded trades from the software.</p> <p>There is one plot similar to the one shown by investment portfolio services. You can see the value of your bought coins and the spent fiat over time. The spent money is with the solid line, the value of your coins in the solid area. The plot is only updated when there is another trade, it doesn't try to look up historical prices in between.</p> <p></p> <p>Then there is an overview over the amount of fiat that was spent over the months:</p> <p></p> <p>This can help you to keep your budget in check and potentially reduce the triggers a bit.</p>"},{"location":"usage/evaluate/#value-with-current-price","title":"Value with current price","text":"<p>Then we have plots which are potentially confusing because they compare historic investments with the current price. This means that the plots will change whenever you look at them again. It makes it a bit hard to evaluate the strategy, but perhaps they can be useful still.</p> <p>One is with the gains from each trigger execution, compared to the current price:</p> <p></p> <p>And also grouped by month:</p> <p></p> <p>Depending on the current price, everything will be shift up or down. It will change historic benefits as well. Likely the first plot is the easiest to understand.</p>"},{"location":"usage/general/","title":"General CLI Usage","text":"<p>This page is about invoking the program in an interactive or manual way. This is the right thing if you are just configuring it and want to test it. For production use, see the page about deployment.</p> <p>The program has a hierarchical command line interface with multiple subcommands. If you have installed it system-wide, you can just directly call it. Otherwise you might have to add <code>~/.local/bin</code> to your <code>PATH</code> variable. With the <code>--help</code> option you will see an up-to-date list of options.</p> <p>The general structure of a call is this:</p> <pre><code>vigilant-crypto-snatch [general options] subcommand [subcommand options]\n</code></pre> <p>The general options are the following:</p> <ul> <li><code>--loglevel</code>: The program can emit a lot of status output while running. You can specify a log level with <code>--loglevel LEVEL</code>, where <code>LEVEL</code> can be <code>critical</code>, <code>error</code>, <code>warning</code>, <code>info</code> or <code>debug</code>. The <code>info</code> level is the default and does not fill the terminal with tons of output. You can set it to <code>debug</code> if you want to have more output and want to diagnose your triggers.</li> </ul> <p>Take a look at the subcommands in the navigation sidebar. You likely want to start with the \u201ctest-drive\u201d to verify that your installation and configuration is correct. Then you may want to use the \u201cevaluate\u201d interface to find optimal triggers for your taste. And finally use \u201cwatch\u201d to start watching the market.</p>"},{"location":"usage/test-drive/","title":"Subcommand test-drive","text":"<p>In order to check your configuration, use the <code>test-drive</code> subcommand.</p> <p>It will test the following things:</p> <ul> <li>Can the database be loaded?</li> <li>Can we receive the balance from your marketplace? This verifies whether you have set up your private keys.</li> <li>Can we retrieve a historical price?</li> <li>Can your triggers be constructed?</li> <li>Can a message be sent via Telegram, if you have set it up?</li> </ul> <p>If that runs through, you have a working configuration.</p>"},{"location":"usage/watch/","title":"Subcommand watch","text":"<p>The main command is <code>watch</code>.  It will monitor the market and place buy orders.</p> <p>When you want to quit, just press Ctrl+C.</p> <p>All historical price data and performed transactions will be stored in a SQLite database at <code>~/.local/share/vigilant-crypto-snatch/db.sqlite</code> (elsewhere on Windows). We sometimes change the database format between major releases. In that case it is easiest to delete the database and let the script create the new one. As there are only so few users, we don't offer proper database migrations.</p> <p>An example for running the script with log level \u201cinfo\u201d:</p> <pre><code>vigilant-crypto-snatch --loglevel info watch\n</code></pre>"},{"location":"usage/watch/#nonce-rejections-with-kraken","title":"Nonce rejections with Kraken","text":"<p>If you happen to get nonce errors with the Kraken marketplace, consider using less triggers for it, or modifying your API key according to their guide.</p>"}]}